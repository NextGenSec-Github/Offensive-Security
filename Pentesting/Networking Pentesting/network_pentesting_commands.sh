# ===========================
# NETWORK PENTESTING COMMANDS
# ===========================

# DISCOVERING HOSTS

ping -c 1 <ip-address> # 1 echo request to a host
fping -g <ip-address>/24 # Send echo requests to ranges
nmap -PE -PM -PP -sn -n <ip-address>/24 #Send echo, timestamp requests and subnet mask requests

masscan -p20,21-23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080 192.168.0.1/24 # Using masscan to scan top20ports of nmap in a /24 range 
masscan -p80,443,8000-8100,8443 192.168.0.1/24 # HTTP Port Discovery

nmap -sU -sV --version-intensity 0 -F -n 199.66.11.53/24 # The -sV will make nmap test each possible known UDP service packet. The "--version-intensity 0" will make nmap only test the most probable

# DISCOVERING HOSTS FROM THE INSIDE

# Passive
netdiscover -p # Netdiscover in passive mode doesn't send any packets but listens passively to network traffic
p0f -i eth0 -p -o /tmp/p0f.log # p0f tool determines OS of hosts based on packets
# Bettercap
net.recon on/off #Read local ARP cache periodically
net.show
set net.show.meta true #more info

# Active
#ARP discovery
nmap -sn <Network> #ARP Requests (Discover IPs)
netdiscover -r <Network> #ARP requests (Discover IPs)

#NBT discovery
nbtscan -r 192.168.0.1/24 #Search in Domain

# Bettercap
net.probe on/off #Discover hosts on current subnet by probing with ARP, mDNS, NBNS, UPNP, and/or WSD
set net.probe.mdns true/false #Enable mDNS discovery probes (default=true)
set net.probe.nbns true/false #Enable NetBIOS name service discovery probes (default=true)
set net.probe.upnp true/false #Enable UPNP discovery probes (default=true)
set net.probe.wsd true/false #Enable WSD discovery probes (default=true)
set net.probe.throttle 10 #10ms between probes sent (default=10)

#IPv6
alive6 <IFACE> # Send a pingv6 to multicast.

# Wake on Lan
wol.eth [MAC] #Send a WOL as a raw ethernet packet of type 0x0847
wol.udp [MAC] #Send a WOL as an IPv4 broadcast packet to UDP port 9

# Scanning Hosts

nmap -sV -sC -O -T4 -n -Pn -oA fastscan <IP> # Nmap for Top1000 most used tcp ports
nmap -sV -sC -O -T4 -n -Pn -p- -oA fullfastscan <IP> # Fast scan all ports
syn.scan 192.168.1.0/24 1 10000 # Bettercap Scan. Ports 1-10000

# UDP Scanning
udp-proto-scanner.pl <IP> # Check if any of the most common udp services are running
nmap -sU -sV --version-intensity 0 -n -F -T4 <IP> # Check if 100 most common UDP services are running

# SCTP Scanning
nmap -T4 -sY -n -oA SCTFastScan <IP> # Nmap fast SCTP scan
nmap -T4 -p- -sY -sV -sC -F -n -oA SCTAllScan <IP> # Nmap all SCTP scan

# REVEALING INTERNAL IPs

# TCPDump
sudo tcpdump -i <INTERFACE> udp port 53 # Listen to DNS request to discover what is searching the host
tcpdump -i <IFACE> icmp # Listen to icmp packets
sudo bash -c "sudo nohup tcpdump -i eth0 -G 300 -w \"/tmp/dump-%m-%d-%H-%M-%S-%s.pcap\" -W 50 'tcp and (port 80 or port 443)' &"

# Wireshark over remote ssh session
ssh user@<TARGET IP> tcpdump -i ens160 -U -s0 -w - | sudo wireshark -k -i -
ssh <USERNAME>@<TARGET IP> tcpdump -i <INTERFACE> -U -s0 -w - 'port not 22' | sudo wireshark -k -i - # Exclude SSH traffic

# Bettercap
net.sniff on
net.sniff stats
set net.sniff.output sniffed.pcap #Write captured packets to file
set net.sniff.local  #If true it will consider packets from/to this computer, otherwise it will skip them (default=false)
set net.sniff.filter #BPF filter for the sniffer (default=not arp)
set net.sniff.regexp #If set only packets matching this regex will be considered

# LAN ATTACKS

# Bettercap
arp.spoof on
set arp.spoof.targets <IP> #Specific targets to ARP spoof (default=<entire subnet>)
set arp.spoof.whitelist #Specific targets to skip while spoofing
set arp.spoof.fullduplex true #If true, both the targets and the gateway will be attacked, otherwise only the target (default=false)
set arp.spoof.internal true #If true, local connections among computers of the network will be spoofed, otherwise only connections going to and coming from the Internet (default=false)

# Arpspoof
echo 1 > /proc/sys/net/ipv4/ip_forward
arpspoof -t 192.168.1.1 192.168.1.2
arpspoof -t 192.168.1.2 192.168.1.1

# MAC Flooding - CAM Overflow
macof -i <interface>









